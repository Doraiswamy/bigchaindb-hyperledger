{"version":3,"sources":["service.js","App.js","registerServiceWorker.js","index.js"],"names":["conn","BDB_API_PATH","_callee","assetId","rawResponse","content","regenerator_default","a","wrap","_context","prev","next","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","sent","json","console","log","abrupt","stop","this","createNewAsset","_x2","_x3","_x4","_createNewAsset","apply","arguments","_callee2","keypair","asset","metadata","condition","output","transaction","txSigned","_context2","_getConnection","bigchaindb_driver_cjs2_min","makeEd25519Condition","publicKey","makeOutput","public_keys","makeCreateTransaction","signTransaction","privateKey","postTransactionCommit","then","retrievedTx","catch","err","_getConnection2","_callee3","_context3","src_App_0","App","props","_this","_classCallCheck","_getPrototypeOf","call","state","inputValue","inputPassphrase","inputAsset","handleSubmit","bind","_assertThisInitialized","handleCreate","ai_module","downloadAndSetup","instrumentationKey","String","event","setState","target","value","preventDefault","trackEvent","_x","_callChaincode","callChaincode","seed","keyPair","bip39","slice","number","parseInt","toString","timestamp","Date","now","tx","id","react_default","createElement","className","onSubmit","htmlFor","type","name","placeholder","onChange","handlePassphraseChange","handleAssetChange","handleValueChange","href","react","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","__webpack_require__","config","react_dom_default","render","document","getElementById","URL","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3b343e4b.chunk.js","sourcesContent":["import * as driver from 'bigchaindb-driver';\nimport * as bip39 from 'bip39';\n\nexport const BDB_SERVER_URL = process.env.REACT_APP_BDB_SERVER_URL || 'http://localhost:9984';\nexport const BDB_API_PATH = `${BDB_SERVER_URL}/api/v1/`;\n\nlet conn;\n\nexport async function callChaincode(assetId) {\n    const rawResponse = await fetch(process.env.REACT_APP_CHAINCODE_URL, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            assetId\n        })\n    });\n\n    const content = await rawResponse.json();\n\n    console.log(content);\n    return true\n}\n\n// gets a Ed25519Keypair from a pass phrase\nexport const getKeypairFromSeed = (seed) => {\n    return new driver.Ed25519Keypair(bip39.mnemonicToSeed(seed).slice(0, 32));\n};\n\n// Creates a new asset in BigchainDB\nexport async function createNewAsset(keypair, asset, metadata) {\n    await _getConnection();\n    const condition = driver.Transaction.makeEd25519Condition(keypair.publicKey, true);\n\n    const output = driver.Transaction.makeOutput(condition);\n    output.public_keys = [keypair.publicKey];\n\n    const transaction = driver.Transaction.makeCreateTransaction(\n        asset,\n        metadata,\n        [output],\n        keypair.publicKey\n    );\n\n    const txSigned = driver.Transaction.signTransaction(transaction, keypair.privateKey);\n    return await conn.postTransactionCommit(txSigned)\n        .then(retrievedTx => {\n            return retrievedTx\n        })\n        .catch(err => {\n            return false\n        });\n}\n\n// private: creates a connection to BDB server\nexport async function _getConnection() {\n    if (!conn) {\n        conn = new driver.Connection(BDB_API_PATH);\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {callChaincode,createNewAsset,getKeypairFromSeed} from './service.js';\nimport {AppInsights} from 'applicationinsights-js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n      inputPassphrase: '',\n      inputAsset: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCreate = this.handleCreate.bind(this);\n    // initialize application insights\n    AppInsights.downloadAndSetup({\n      instrumentationKey: String(process.env.REACT_APP_APPLICATION_INSIGHTS_KEY)\n    });\n  }\n  handleValueChange(event) {\n    this.setState({inputValue: event.target.value})\n  }\n  handlePassphraseChange(event) {\n    this.setState({inputPassphrase: event.target.value})\n  }\n  handleAssetChange(event) {\n    this.setState({inputAsset: event.target.value})\n  }\n  handleSubmit(event) {\n    if(this.state.inputValue) {\n      event.preventDefault();\n      console.log('inputValue: ' + this.state.inputValue);\n      AppInsights.trackEvent(\"UISubmit\", {\n        assetId: this.state.inputValue\n      });\n      callChaincode(this.state.inputValue);\n    }\n  }\n  async handleCreate(event) {\n    if(this.state.inputAsset && this.state.inputPassphrase) {\n      event.preventDefault();\n      const keyPair = getKeypairFromSeed(this.state.inputPassphrase);\n      const asset = {\n        number: parseInt(this.state.inputAsset.toString(),10),\n        timestamp: Date.now()\n      }\n      const tx = await createNewAsset(keyPair, asset, null);\n      console.log(tx);\n      this.setState({inputValue: tx.id});\n    }\n  }\n  render() {\n    return (<section className=\"jumbotron text-center\">\n      <div className=\"container\">\n        <h1><strong>BigchainDB</strong> integration with <strong>Hyperledger Fabric</strong></h1>\n        <br/><br/>\n        <div className=\"alert alert-warning\">\n          This UI is for demo usage of the BigchainDB-Hyperledger Fabric oracle. The following form first we create a BigchainDB asset by providing passphrase and asset data. Once the asset is created, the asset id is passed to a Hyperledger chain-code which internally passes it to the oracle. The oracle then queries BigchainDB with the asset id and executes a callback passed by the Hyperledger chain-code.<br/>\n          The oracle then sends back the results to Hyperledger chain-code.\n          <br/><br/>\n          In a real scenario, the chain-code can do pre-processing and create a dynamic callback before sending the request to the oracle.\n        </div>\n        <br/><br/>\n        <div className=\"row\">\n          <div className=\"col-6\">\n            <h4 className=\"jumbotron-heading\">BigchainDB asset creation</h4>\n            <br/>\n            <div className=\"lead-body\">\n              <form className=\"inputForm\" onSubmit={this.handleCreate}>\n                <div>\n                  <label htmlFor=\"inputPassphrase\" className=\"sr-only\">Passphrase:</label>\n                  <input type=\"text\" name=\"inputPassphrase\" id=\"inputPassphrase\" className=\"form-control\" placeholder=\"Passphrase\" value={this.state.inputPassphrase} onChange={this.handlePassphraseChange.bind(this)}/>\n                </div>\n                <br/>\n                <div>\n                  <label htmlFor=\"inputAsset\" className=\"sr-only\">Asset:</label>\n                  <textarea type=\"text\" name=\"inputAsset\" id=\"inputAsset\" className=\"form-control\" placeholder=\"Enter a number\" value={this.state.inputAsset} onChange={this.handleAssetChange.bind(this)}></textarea>\n                </div>\n                <br/>\n                <div>\n                  <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Create asset</button>\n                </div>\n              </form>\n            </div>\n          </div>\n          <div className=\"col-6\">\n            <h4 className=\"jumbotron-heading\">Hyperledger Fabric Oracle</h4>\n            <br/>\n            <div className=\"lead-body\">\n              <form className=\"inputForm\" onSubmit={this.handleSubmit}>\n                <div>\n                  <label htmlFor=\"inputValue\" className=\"sr-only\">Value:</label>\n                  <input type=\"text\" name=\"inputValue\" id=\"inputValue\" className=\"form-control\" placeholder=\"Asset id\" value={this.state.inputValue} onChange={this.handleValueChange.bind(this)}/>\n                </div>\n                <br/>\n                <div>\n                  <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Send to Hyperledger</button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n        <div className=\"footer\">\n          Developed By: <a href=\"https://www.bigchaindb.com\">BigchainDB</a> and <a href=\"https://theledger.be\">TheLedger</a>\n        </div>\n      </div>\n    </section>)\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nrequire('dotenv').config()\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}